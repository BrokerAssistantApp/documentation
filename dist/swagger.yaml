openapi: 3.1.0
info:
  title: BrokerAssistant API
  version: 1.0.0
  description: "BrokerAssistant API предоставляет функционал для управления лотами на торгах по банкротству, \nвзаимодействия между брокерами и инвесторами, а также распределения прибыли. \n\n\U0001F510 Безопасность и авторизация:\n- Авторизация реализована через JWT-токены, передаваемые в `HttpOnly`-cookie.\n- Для аутентификации необходимо выполнить логин (`/auth/login`), после чего токен автоматически отправляется в запросах.\n- Фронтенд должен отправлять запросы с `withCredentials: true`, чтобы браузер автоматически передавал `accessToken`.\n- Обновление `accessToken` выполняется через `refreshToken` (`/auth/refresh`).\n- Для выхода из системы вызывается `/auth/logout`, удаляющий сессионные токены.\n\n\U0001F4C4 Документация API:\n- Полный список эндпоинтов доступен в разделе \"Paths\".\n- Описание параметров запросов находится в \"Schemas\".\n"
servers:
  - url: 'https://api.brokerassistant.com/v1'
    description: Production server
  - url: 'http://localhost:8080/v1'
    description: Development server
tags:
  - name: Auth
    description: Методы аутентификации
  - name: Payments
    description: 'Методы управления тарифами, подписками и платежами'
  - name: Users
    description: Методы работы с пользователями
  - name: Members
    description: Методы управления участниками
  - name: Lots
    description: Методы управления лотами
  - name: LotSalePrice
    description: Методы управления ценой продажи
  - name: LotStatus
    description: Методы управления статусами лотов
  - name: LotMembers
    description: Управление участниками лотов
  - name: LotExpenses
    description: Учет расходов
  - name: LotTransactions
    description: Финансовые транзакции
  - name: LotFinancials
    description: Финансовый учет по лотам
security:
  - SessionCookiesJWT: []
paths:
  /auth/signup:
    post:
      summary: Регистрация брокера
      security: []
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                name:
                  type: string
      responses:
        '201':
          description: Брокер успешно зарегистрирован
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Брокер успешно зарегистрирован
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /auth/login:
    post:
      summary: Вход в систему
      description: Создает `accessToken` и `refreshToken` (`httpOnly`)
      security: []
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: Успешный вход в систему
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Успешный вход в систему
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/User.WithIsBroker'
                          - $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - type: object
                    properties:
                      error:
                        type: object
                        properties:
                          message:
                            type: string
                            example: Неправильный логин и/или пароль
  /auth/status:
    get:
      summary: Проверка статуса авторизации
      description: Проверяет действительность `accessToken`. Не обновляет `accessToken` и/или `RefreshToken`
      tags:
        - Auth
      responses:
        '200':
          description: Пользователь авторизован
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Пользователь авторизован
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/User.WithIsBroker'
                          - $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован или токен истёк
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
  /auth/refresh:
    post:
      summary: Обновление accessToken
      description: |
        Если `accessToken` истёк, эндпоинт выдаст новый, используя `refreshToken`, который хранится в `httpOnly`-cookie.

        - Если `refreshToken` действителен → выдает новый `accessToken`.
        - Если `refreshToken` истёк или отсутствует → `401 Unauthorized`, требуется повторный логин.
      tags:
        - Auth
      responses:
        '200':
          description: '`accessToken` обновлен'
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Сессия пользователя обновлена
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: 'Ошибка: `refreshToken` истёк или недействителен'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
  /auth/logout:
    post:
      summary: Выход из системы
      description: 'Удаляет `accessToken` и `refreshToken`, разлогинивает пользователя.'
      tags:
        - Auth
      responses:
        '200':
          description: Успешный выход из системы
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Успешный выход из системы
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь уже вышел или `refreshToken` отсутствует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
  /payments/current-plan:
    $ref: '#/paths/~1auth~1logout'
  /users/me:
    get:
      summary: Получить данные текущего пользователя
      description: 'Возвращает информацию о текущем пользователе, основываясь на `accessToken` в `httpOnly`-cookie.'
      tags:
        - Users
      responses:
        '200':
          description: Данные текущего пользователя
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Данные пользователя
                      data:
                        oneOf:
                          - $ref: '#/components/schemas/User.WithIsBroker'
                          - $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
    patch:
      summary: Обновить данные профиля
      description: Позволяет пользователю изменить своё имя
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Новое имя пользователя
      responses:
        '200':
          description: Профиль успешно обновлен
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Профиль успешно обновлён
                      data:
                        $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
  /members:
    get:
      summary: Получить список участников брокера
      description: 'Возвращает список всех инвесторов и партнеров, участвующих в лотах брокера.'
      tags:
        - Members
      responses:
        '200':
          description: Список участников лотов брокера
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Список участников брокера
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
    post:
      summary: Добавить участника брокера
      description: |
        Позволяет добавить участника брокера

        Если пользователь с таким `email`:
        - Уже существует, то привязывает его к списку участников конкретного брокера  
        - Не найден в БД, то создает пользователя с `is_broker = false` и привязывает его к списку участников конкретного брокера
      tags:
        - Members
      security:
        - SessionCookiesJWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - auth_method
              properties:
                name:
                  type: string
                  example: Иван Партнёр
                email:
                  type: string
                  format: email
                  example: ivan.partner@example.com
      responses:
        '201':
          description: Участник успешно добавлен
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник успешно добавлен
                      data:
                        $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
  '/members/{brokerMemberId}':
    get:
      summary: Получить участника брокера
      description: Возвращает информацию об участнике (инвесторе или партнёре).
      tags:
        - Members
      parameters:
        - name: brokerMemberId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Информация об участнике брокера
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Информация об участнике брокера
                      data:
                        $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Участник не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник не найден
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
    patch:
      summary: Обновить данные участника брокера
      description: Позволяет брокеру обновить данные своего инвестора/партнёра.
      tags:
        - Members
      parameters:
        - name: brokerMemberId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Новое имя участника
      responses:
        '200':
          description: Участник успешно обновлён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник успешно обновлён
                      data:
                        $ref: '#/components/schemas/User'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Участник не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник не найден
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
    delete:
      summary: Удалить участника брокера
      description: |
        Удаляет участника (инвестора/партнёра).

        - Если пользователь не участвовал нигде в системе — удаляется и **участник брокера**, и **пользователь**
        - Если пользователь не участвовал в лотах текущего брокера, но участвовал у других — удаляется только **участник брокера**
        - Если пользователь участвовал в лотах текущего брокера как участник, реферал или в транзакциях — применяется мягкое удаление (`deleted_at` в `broker_members`)
      tags:
        - Members
      parameters:
        - name: brokerMemberId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Участник успешно удалён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник успешно удалён
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Удаление невозможно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Участник не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник не найден
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
  /lots:
    get:
      summary: Получить список лотов
      description: |
        Возвращает список всех лотов:  
        - **Если запрос с аккаунта брокера**:
          - Не указан параметр `brokerMemberId` - созданных брокером + где брокер как инвестор/партнер
          - Указан параметр `brokerMemberId` - конкретного участника, где участник как инвестор или партнер текущего брокера
        - **Если запрос с аккаунта участника**: где участник как инвестор + где участник как партнер

        Позволяет фильтровать по статусу.
      tags:
        - Lots
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum:
              - all
              - purchased
              - renovation
              - hold
              - listed_for_sale
              - sold
              - closed
            default: all
          description: Фильтрация по статусу лота
        - name: brokerMemberId
          in: query
          schema:
            type: string
            format: uuid
          description: Используется только брокером для получения лотов конкретного участника
      responses:
        '200':
          description: Список лотов
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Список лотов
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Lot'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '404':
          description: Лоты не найдены по указанным параметрам
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лоты не найдены
                      data:
                        type: 'null'
                      error:
                        type: object
                        properties:
                          message:
                            type: string
                            example: По указанным параметрам данные отсутствуют
                      meta:
                        type: 'null'
    post:
      summary: Создать новый лот
      tags:
        - Lots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                dealType:
                  type: string
                  enum:
                    - self_funded
                    - syndicated
                    - agency
                  example: syndicated
                shareInputMode:
                  type: string
                  enum:
                    - percent
                    - amount
                  example: percent
                purchasePrice:
                  type: number
                  example: 1500000
                salePrice:
                  type: number
                  example: 3000000
                brokerCommission:
                  type: number
                  example: 25000
                brokerCommissionPercent:
                  type: number
                  example: 25
                brokerTaxPercent:
                  type: number
                  example: 7
                purchaseDate:
                  type: string
                  format: date
                autoShareByInvestment:
                  type: boolean
      responses:
        '201':
          description: Лот успешно создан
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот успешно создан
                      data:
                        $ref: '#/components/schemas/Lot.Details'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
  '/lots/{lotId}':
    get:
      summary: Получить лот
      description: Возвращает информацию о лоте.
      tags:
        - Lots
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID идентификатор лота
      responses:
        '200':
          description: Информация о лоте
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Информация о лоте
                      data:
                        $ref: '#/components/schemas/Lot.Details'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
    patch:
      summary: Обновить данные лота
      description: |
        Позволяет обновить данные лота по id.

        Обновление невозможно, если лот находится в статусе `sold` или `closed`
      tags:
        - Lots
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID идентификатор лота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                purchasePrice:
                  type: number
                  example: 1500000
                brokerCommission:
                  type: number
                  example: 25000
                brokerCommissionPercent:
                  type: number
                  example: 25
                brokerTaxPercent:
                  type: number
                  example: 7
                purchaseDate:
                  type: string
                  format: date
                updatedAt:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Лот успешно обновлён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот успешно обновлён
                      data:
                        type: object
                        properties:
                          name:
                            type: string
                          purchasePrice:
                            type: number
                            example: 1500000
                          brokerCommission:
                            type: number
                            example: 25000
                          brokerCommissionPercent:
                            type: number
                            example: 25
                          brokerTaxPercent:
                            type: number
                            example: 7
                          purchaseDate:
                            type: string
                            format: date
                          updatedAt:
                            type: string
                            format: date-time
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации данных или обновление невозможно
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
        '409':
          description: Конфликт версий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
    delete:
      summary: Удалить лот
      description: |
        Удаляет лот. 

        Удаление невозможно, если:
        - Есть участники
        - Есть транзакции с типом `payout`, `broker_commission`, `broker_tax` или `referral_fee`
        - Лот в статусе `sold` или `closed`

        В остальных случаях — удаление жёсткое.
      tags:
        - Lots
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Лот успешно удалён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот успешно удалён
                      data:
                        type: 'null'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Удаление невозможно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/sale-price':
    post:
      summary: Обновить цену продажи лота
      description: Обновление цены продажи невозможно после статуса `sold` или `closed`
      tags:
        - LotSalePrice
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID идентификатор лота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: 'Сделали ремонт, цена на рынке увеличилась'
                salePrice:
                  type: number
                  example: 1500000
                updatedAt:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Цена продажи лота успешно обновлёна
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Цена продажи лота успешно обновлёна
                      data:
                        type: object
                        properties:
                          salePrice:
                            type: number
                            example: 1500000
                          updatedAt:
                            type: string
                            format: date-time
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Обновление невозможно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
        '409':
          description: Конфликт версий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
  '/lots/{lotId}/sale-price-history':
    get:
      summary: Получить историю цены продажи лота
      description: Возвращает хронологическую историю изменения цены продажи лота.
      tags:
        - LotSalePrice
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID идентификатор лота
      responses:
        '200':
          description: История цены продажи лота
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: История цены продажи лота
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/LotSalePriceHistory'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/status':
    post:
      summary: Обновить статус лота
      description: |
        - Статус нельзя изменить после `sold` или `closed`.
        - Откат возможен только между «мягкими» статусами: `renovation`, `hold`, `listed_for_sale`.
        - Возврат к `purchased` невозможен после его смены.
        - При установке статуса `sold` обязательно передаются `salePrice` и `saleDate` — они фиксируют итоговую стоимость и дату продажи.
        - При других статусах `salePrice` и `saleDate` игнорируются и не возвращаются в ответе.
      tags:
        - LotStatus
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID идентификатор лота
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - purchased
                    - renovation
                    - hold
                    - listed_for_sale
                    - sold
                    - closed
                  example: sold
                salePrice:
                  type: number
                  example: 1500000
                saleDate:
                  type: string
                  format: date
                updatedAt:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Статус лота успешно обновлён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Статус лота успешно обновлён
                      data:
                        type: object
                        properties:
                          status:
                            type: string
                            example: sold
                          salePrice:
                            type: number
                            example: 1500000
                          saleDate:
                            type: string
                            format: date
                          updatedAt:
                            type: string
                            format: date-time
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Обновление невозможно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
        '409':
          description: Конфликт версий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictErrorResponse'
  '/lots/{lotId}/status-history':
    get:
      summary: Получить историю статусов лота
      description: Возвращает хронологическую историю изменения статусов лота.
      tags:
        - LotStatus
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID идентификатор лота
      responses:
        '200':
          description: История статусов лота
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: История статусов лота
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/LotStatusHistory'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/members':
    get:
      summary: Получить список участников лота
      tags:
        - LotMembers
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список участников лота
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Список участников лота
                      data:
                        type: object
                        properties:
                          totalInvestments:
                            type: number
                            example: 100000
                          investmentsIncludedInShare:
                            type: number
                            example: 100000
                          members:
                            type: array
                            items:
                              allOf:
                                - $ref: '#/components/schemas/LotMember'
                                - type: object
                                  properties:
                                    isReferrer:
                                      type: boolean
                                    totalInvestments:
                                      type: number
                                      example: 100000
                                    investmentsIncludedInShare:
                                      type: number
                                      example: 100000
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
    post:
      summary: Добавить участника в лот
      description: |
        Позволяет добавить участника в лот

        При передаче параметра `referralFeePercent` или `referralFeeAmount` обязательно должен быть передан параметр `referrerMemberId`.
      tags:
        - LotMembers
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId:
                  type: string
                  format: uuid
                referrerMemberId:
                  type: string
                  format: uuid
                  nullable: true
                referralFeePayer:
                  type: string
                  enum:
                    - member
                    - broker
                  example: member
                sharePercent:
                  type: number
                  example: 20
                shareAmount:
                  type: number
                  example: 500000
                referralFeePercent:
                  type: number
                  example: 5
                referralFeeAmount:
                  type: number
                  example: 5000
                investments:
                  type: array
                  items:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 100000
                      includeInShare:
                        type: boolean
      responses:
        '201':
          description: Участник успешно добавлен в лот
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник успешно добавлен в лот
                      data:
                        type: object
                        properties:
                          totalInvestments:
                            type: number
                            example: 100000
                          investmentsIncludedInShare:
                            type: number
                            example: 100000
                          member:
                            allOf:
                              - $ref: '#/components/schemas/LotMember'
                              - type: object
                                properties:
                                  isReferrer:
                                    type: boolean
                                  totalInvestments:
                                    type: number
                                    example: 100000
                                  investmentsIncludedInShare:
                                    type: number
                                    example: 100000
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/members/{memberId}':
    patch:
      summary: Обновить параметры участника в лоте
      description: |
        Позволяет изменить долю участия и реферальную комиссию участника в лоте.

        При передаче параметра `referralFeePercent` или `referralFeeAmount` должен быть передан параметр `referrerMemberId`, иначе они игнорируются.

        Обновление невозможно, если лот находится в статусе `sold` или `closed`
      tags:
        - LotMembers
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: memberId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                referrerMemberId:
                  type: string
                  format: uuid
                  nullable: true
                referralFeePayer:
                  type: string
                  enum:
                    - member
                    - broker
                  example: member
                sharePercent:
                  type: number
                  example: 20
                shareAmount:
                  type: number
                  example: 500000
                referralFeePercent:
                  type: number
                  example: 5
                referralFeeAmount:
                  type: number
                  example: 5000
                investments:
                  type: array
                  items:
                    type: object
                    properties:
                      transactionId:
                        type: string
                        format: uuid
                        description: Идентификатор транзакции
                      amount:
                        type: number
                        description: Сумма транзакции
                        example: 100000
                      includeInShare:
                        type: boolean
                        description: Учитывается ли транзакция в расчете доли
      responses:
        '200':
          description: Участник лота успешно обновлён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник лота успешно обновлён
                      data:
                        type: object
                        properties:
                          totalInvestments:
                            type: number
                            example: 100000
                          investmentsIncludedInShare:
                            type: number
                            example: 100000
                          member:
                            allOf:
                              - $ref: '#/components/schemas/LotMember'
                              - type: object
                                properties:
                                  isReferrer:
                                    type: boolean
                                  totalInvestments:
                                    type: number
                                    example: 100000
                                  investmentsIncludedInShare:
                                    type: number
                                    example: 100000
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации данных или обновление невозможно
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот или участник не найдены
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот или участник не найдены
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
    delete:
      summary: Удалить участника из лота
      description: |
        Удаляет участника из лота.

        Удаление невозможно, если:
        - У участника есть транзакции с типом `payout` или `referral_fee`
        - Лот в статусе `sold` или `closed`.

        В остальных случаях — удаление жёсткое.
      tags:
        - LotMembers
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: memberId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Участник успешно удалён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Участник успешно удалён
                      data:
                        type: object
                        properties:
                          totalInvestments:
                            type: number
                            example: 100000
                          investmentsIncludedInShare:
                            type: number
                            example: 100000
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Удаление невозможно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот или участник не найдены
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот или участник не найдены
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/expenses':
    get:
      summary: Получить список расходов по лоту
      tags:
        - LotExpenses
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список расходов лота
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Список расходов по лоту
                      data:
                        type: object
                        properties:
                          totalAmount:
                            type: number
                            example: 100000
                          includedInCostAmount:
                            type: number
                            example: 100000
                          expenses:
                            type: array
                            items:
                              $ref: '#/components/schemas/LotExpense'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
    post:
      summary: Добавить расход по лоту
      description: 'Добавление расхода по лоту невозможно, если лот находится в статусе `sold` или `closed`'
      tags:
        - LotExpenses
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - amount
              properties:
                description:
                  type: string
                  example: Покупка стройматериалов
                amount:
                  type: number
                  example: 100000
                reimbursementMemberId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Расход добавлен
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Расход добавлен
                      data:
                        type: object
                        properties:
                          totalAmount:
                            type: number
                            example: 100000
                          includedInCostAmount:
                            type: number
                            example: 100000
                          expense:
                            $ref: '#/components/schemas/LotExpense'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации данных или добавление невозможно
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот или транзакция не найдены
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот или транзакция не найдены
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/expenses/{transactionId}':
    patch:
      summary: Обновить расход по лоту
      description: 'Обновление расхода по лоту невозможно, если лот находится в статусе `sold` или `closed`'
      tags:
        - LotExpenses
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - amount
              properties:
                description:
                  type: string
                  example: Покупка стройматериалов
                amount:
                  type: number
                  example: 100000
                reimbursementMemberId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Расход обновлён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Расход обновлён
                      data:
                        type: object
                        properties:
                          totalAmount:
                            type: number
                            example: 100000
                          includedInCostAmount:
                            type: number
                            example: 100000
                          expense:
                            $ref: '#/components/schemas/LotExpense'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Ошибка валидации данных или обновление невозможно
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationErrorResponse'
                  - $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот или транзакция не найдены
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот или транзакция не найдены
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
    delete:
      summary: Удалить расход по лоту
      description: 'Удаление расхода по лоту невозможно, если лот находится в статусе `sold` или `closed`'
      tags:
        - LotExpenses
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Расход успешно удалён
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Расход успешно удалён
                      data:
                        type: object
                        properties:
                          totalAmount:
                            type: number
                            example: 100000
                          includedInCostAmount:
                            type: number
                            example: 100000
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '400':
          description: Удаление невозможно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadErrorResponse'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот или транзакция не найдены
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот или транзакция не найдены
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/transactions':
    get:
      summary: Получить список транзакций по лоту
      description: |
        Возвращает список всех финансовых транзакций, связанных с конкретным лотом.

        Поддерживает фильтрацию по типу и участнику.
      tags:
        - LotTransactions
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - investment
              - payout
              - broker_commission
              - broker_tax
              - referral_fee
              - expense
          description: Фильтрация по типу транзакции
        - name: user_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Фильтрация по участнику (user_id)
      responses:
        '200':
          description: Список транзакций по лоту
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Список транзакций по лоту
                      data:
                        type: object
                        properties:
                          investments:
                            $ref: '#/components/schemas/LotTransactionGroup'
                          payouts:
                            $ref: '#/components/schemas/LotTransactionGroup'
                          brokerCommission:
                            $ref: '#/components/schemas/LotTransactionGroup'
                          brokerTax:
                            $ref: '#/components/schemas/LotTransactionGroup'
                          referralFees:
                            $ref: '#/components/schemas/LotTransactionGroup'
                          expenses:
                            $ref: '#/components/schemas/LotTransactionGroup'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
  '/lots/{lotId}/financials':
    get:
      summary: Получить финансовый отчёт по лоту
      description: |
        Возвращает агрегированные финансовые показатели по указанному лоту, включая закупочную цену, продажную цену, чистую/грязную прибыль, комиссию брокера и прочее.
      tags:
        - LotFinancials
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID лота
      responses:
        '200':
          description: Финансовый отчёт по лоту
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Финансовый отчёт по лоту
                      data:
                        $ref: '#/components/schemas/LotFinancials'
                      error:
                        type: 'null'
                      meta:
                        type: 'null'
        '401':
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorResponse'
        '403':
          description: Пользователь не имеет доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenErrorResponse'
        '404':
          description: Лот не найден
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/NotFoundErrorResponse'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Лот не найден
                      data:
                        type: 'null'
                      meta:
                        type: 'null'
components:
  schemas:
    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 'Флаг успешности запроса (`true` — запрос выполнен успешно, `false` — произошла ошибка)'
        message:
          type: string
          description: Краткое описание результата
        data:
          type:
            - object
            - 'null'
          nullable: true
          description: Основные данные ответа. Может быть объектом или `null`
        error:
          nullable: true
          description: 'Информация об ошибке (присутствует, если `success: false`)'
          $ref: '#/components/schemas/Error'
        meta:
          nullable: true
          description: 'Дополнительные данные, например, информация о пагинации'
          $ref: '#/components/schemas/Meta'
    BadErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum:
                - false
            message:
              type: string
              example: Невозможно выполнить операцию
            data:
              type: 'null'
            error:
              allOf:
                - $ref: '#/components/schemas/Error'
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 400
                    message:
                      type: string
                      example: Описание причины
                    details:
                      type: 'null'
            meta:
              type: 'null'
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum:
                - false
            message:
              type: string
              example: Ошибка валидации
            data:
              type: 'null'
            error:
              allOf:
                - $ref: '#/components/schemas/Error'
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 400
                    message:
                      type: string
                      example: Некорректные данные
            meta:
              type: 'null'
    UnauthorizedErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum:
                - false
            message:
              type: string
              example: Пользователь не авторизован
            data:
              type: 'null'
            error:
              allOf:
                - $ref: '#/components/schemas/Error'
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 401
                    message:
                      type: string
                      example: Доступ запрещён
                    details:
                      type: 'null'
            meta:
              type: 'null'
    ForbiddenErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum:
                - false
            message:
              type: string
              example: Доступ запрещён
            data:
              type: 'null'
            error:
              allOf:
                - $ref: '#/components/schemas/Error'
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 403
                    message:
                      type: string
                      example: У вас нет прав для выполнения этого действия
                    details:
                      type: 'null'
            meta:
              type: 'null'
    NotFoundErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum:
                - false
            message:
              type: string
              example: Не найдено
            data:
              type: 'null'
            error:
              allOf:
                - $ref: '#/components/schemas/Error'
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 404
                    message:
                      type: string
                      example: Данные отсутствуют
                    details:
                      type: 'null'
            meta:
              type: 'null'
    ConflictErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum:
                - false
            message:
              type: string
              example: Конфликт версий
            data:
              type: 'null'
            error:
              allOf:
                - $ref: '#/components/schemas/Error'
                - type: object
                  properties:
                    code:
                      type: integer
                      example: 409
                    message:
                      type: string
                      example: Обновите страницу и попробуйте снова
                    details:
                      type: 'null'
            meta:
              type: 'null'
    Error:
      type:
        - object
        - 'null'
      properties:
        code:
          type: integer
          description: 'HTTP-код ошибки (например, 400, 404 и т.д.)'
        message:
          type: string
          description: Сообщение об ошибке
        details:
          type:
            - array
            - 'null'
          nullable: true
          description: Список дополнительных деталей об ошибке. Используется при валидации.
          items:
            type: object
            properties:
              field:
                type: string
                description: 'Название поля, вызвавшего ошибку'
              message:
                type: string
                description: Сообщение о проблеме с этим полем
    Meta:
      type:
        - object
        - 'null'
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя
        email:
          type: string
          format: email
          description: Адрес электронной почты пользователя
        name:
          type: string
          example: Иванов Пётр Васильевич
          description: Имя пользователя
        createdAt:
          type: string
          format: date-time
          description: Время создания пользователя
    User.WithIsBroker:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            isBroker:
              type: boolean
              description: 'Указывает, является ли пользователь брокером'
    User.WithoutIsBroker:
      $ref: '#/components/schemas/User'
    Lot:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор лота
        dealType:
          type: string
          enum:
            - self_funded
            - syndicated
            - agency
          description: |
            Тип сделки:
            - `self_funded` — сделка полностью за счёт брокера (без участников);
            - `syndicated` — сделка с привлечением инвесторов и распределением прибыли;
            - `agency` — агентская схема: брокер получает комиссию, не участвуя в финансировании.
          example: syndicated
        status:
          type: string
          enum:
            - purchased
            - renovation
            - hold
            - listed_for_sale
            - sold
            - closed
          description: Статус лота
          example: purchased
        name:
          type: string
          description: Название лота
          example: Земельный участок
        purchasePrice:
          type: number
          description: Цена покупки лота
          example: 1500000
        salePrice:
          type: number
          description: Цена продажи лота
          example: 3000000
        brokerCommission:
          type: number
          description: Комиссия брокера (₽)
          example: 25
        brokerCommissionPercent:
          type: number
          description: Комиссия брокера (%)
          example: 25
        brokerTaxPercent:
          type: number
          description: Процент налога с брокера
          example: 7
        purchaseDate:
          type: string
          format: date
          description: Дата покупки лота
        saleDate:
          type: string
          nullable: true
          format: date
          description: Дата продажи лота
        createdAt:
          type: string
          format: date-time
          description: Время создания записи
    Lot.Details:
      allOf:
        - $ref: '#/components/schemas/Lot'
        - properties:
            shareInputMode:
              type: string
              enum:
                - percent
                - amount
              description: |
                Режим ввода долей участников:

                - `percent` — доли вводятся вручную в процентах (например, 25.00%);
                - `amount` — доли вводятся в валютном эквиваленте (например, 500000 рублей).
              example: percent
            autoShareByInvestment:
              type: boolean
              description: |
                Если установлен в `true`, доли участников рассчитываются автоматически 
                на основе их вкладов (`investment`) относительно общей суммы всех инвестиций.
                Работает только при `shareInputMode = "percent"`.
              example: true
            hasStatusHistory:
              type: boolean
              description: Признак наличия истории смены статуса
            hasSalePriceHistory:
              type: boolean
              description: Признак наличия истории изменения цены продажи
            updatedAt:
              type: string
              format: date-time
              description: Время последнего обновления записи
    LotSalePriceHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор записи истории статуса лота
        reason:
          type: string
          example: 'Сделали ремонт, цена на рынке увеличилась'
          description: Заметка о причине изменения цены
        oldPrice:
          type: number
          example: 1500000
          description: Старая цена продажи
        newPrice:
          type: number
          example: 2000000
          description: Новая цена продажи
        createdAt:
          type: string
          format: date-time
          description: Дата создания записи
    LotStatusHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор записи истории статуса лота
        status:
          type: string
          enum:
            - purchased
            - renovation
            - hold
            - listed_for_sale
            - sold
            - closed
          description: Статус лота
        createdAt:
          type: string
          format: date-time
          description: Дата создания записи
    LotMember:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
          nullable: true
          description: Идентификатор участника
        referrerMemberId:
          type: string
          format: uuid
          nullable: true
          description: Идентификатор участника который пригласил реферального участника
        referralFeePayer:
          type: string
          enum:
            - member
            - broker
          description: 'Кто оплачивает реферальное вознаграждение участнику, который привел инвестора'
        sharePercent:
          type:
            - number
            - 'null'
          nullable: true
          description: Доля участника (%) в лоте
          example: 20
        shareAmount:
          type:
            - number
            - 'null'
          nullable: true
          description: Доля участника (сумма в ₽) в лоте
          example: 200000
        referralFeePercent:
          type:
            - number
            - 'null'
          nullable: true
          description: Процент реферальной комиссии
          example: 5
        referralFeeAmount:
          type:
            - number
            - 'null'
          nullable: true
          description: Процент реферальной комиссии
          example: 5000
        investments:
          type: array
          items:
            $ref: '#/components/schemas/LotInvestment'
    LotInvestment:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
          description: Идентификатор транзакции
        amount:
          type: number
          description: Сумма транзакции
          example: 100000
        includeInShare:
          type: boolean
          description: Учитывается ли транзакция в расчете доли
        createdAt:
          type: string
          format: date-time
          description: Время создания
    LotExpense:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
          description: Идентификатор транзакции
        reimbursementMemberId:
          type: string
          format: uuid
          description: Идентификатор участника лота которому возвращается расход
        description:
          type: string
          description: Описание расходов
          example: Покупка стройматериалов
        amount:
          type: number
          description: Сумма транзакции
          example: 100000
    LotTransaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Уникальный идентификатор транзакции
        lotId:
          type: string
          format: uuid
          description: Идентификатор лота
        userId:
          type: string
          format: uuid
          nullable: true
          description: 'Идентификатор пользователя, связанного с транзакцией'
        type:
          type: string
          enum:
            - investment
            - payout
            - broker_commission
            - broker_tax
            - referral_fee
            - expense
          description: Тип транзакции
        amount:
          type: number
          description: Сумма транзакции
          example: 100000
        updatedAt:
          type: string
          format: date-time
          description: Время последнего изменения
        createdAt:
          type: string
          format: date-time
          description: Время создания
    LotTransactionGroup:
      type: object
      properties:
        total:
          type: number
          example: 1000000
        transactions:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/LotTransaction'
              - type: object
                properties:
                  amount:
                    type: number
                    example: 1000000
                  type:
                    type: string
                    example: investment
    LotFinancials:
      type: object
      properties:
        lotId:
          type: string
          format: uuid
          description: Идентификатор лота
        purchasePrice:
          type: number
          example: 1500000
          description: Цена покупки лота
        totalExpensesInCost:
          type: number
          example: 300000
          description: 'Сумма расходов, учтённых в себестоимости'
        totalCost:
          type: number
          example: 1800000
          description: Общая себестоимость лота (покупка + расходы)
        salePrice:
          type: number
          example: 2500000
          description: Цена продажи лота
        grossProfit:
          type: number
          example: 700000
          description: Валовая прибыль (продажа − себестоимость)
        brokerCommission:
          type: number
          example: 120000
          description: Сумма комиссии брокера
        brokerTax:
          type: number
          example: 50000
          description: 'Налог, уплачиваемый брокером с общей суммы дохода от продажи лота'
        totalReferralFees:
          type: number
          example: 80000
          description: Сумма всех реферальных выплат
        netProfit:
          type: number
          example: 450000
          description: Чистая прибыль после всех удержаний
        totalInvestments:
          type: number
          example: 1000000
          description: 'Сумма всех инвестиций, участвующих в долях'
        totalInvestmentsExcluded:
          type: number
          example: 200000
          description: 'Сумма инвестиций, не участвующих в долях'
        totalPayouts:
          type: number
          example: 1500000
          description: Общая сумма выплат участникам
        netPayouts:
          type: number
          example: 1300000
          description: Выплаты без учёта инвестиций
        payoutsMinusInvestments:
          type: number
          example: 500000
          description: Разница между выплатами и инвестициями
        createdAt:
          type: string
          format: date-time
          description: Дата создания записи
  securitySchemes:
    SessionCookiesJWT:
      type: apiKey
      in: cookie
      name: access_token
      description: |
        Авторизация через access_token, установленный как httpOnly cookie.
        Используется для аутентификации всех защищённых эндпоинтов.
